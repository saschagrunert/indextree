var searchIndex = JSON.parse('{\
"indextree":{"doc":"Arena based tree data structure","t":"DNNDDDDNDNNDEEDDDNNNDDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Ancestors","AppendAncestor","AppendSelf","Arena","Children","DebugPrettyPrint","Descendants","End","FollowingSiblings","InsertAfterSelf","InsertBeforeSelf","Node","NodeEdge","NodeError","NodeId","PrecedingSiblings","Predecessors","PrependAncestor","PrependSelf","Removed","ReverseChildren","ReverseTraverse","Start","Traverse","ancestors","append","append_value","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","checked_append","checked_insert_after","checked_insert_before","checked_prepend","children","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","count","debug_pretty_print","default","descendants","detach","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","first_child","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","following_siblings","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get","get_mut","get_mut","get_node_id","hash","hash","index","index_mut","insert_after","insert_before","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_removed","is_removed","iter","iter_mut","last_child","new","new_node","next","next","next","next","next","next","next","next","next","next_sibling","next_traverse","parent","partial_cmp","preceding_siblings","predecessors","prepend","prev_traverse","previous_sibling","provide","remove","remove_subtree","reserve","reverse_children","reverse_traverse","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","traverse","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity"],"q":[[0,"indextree"]],"d":["An iterator of the IDs of the ancestors of a given node.","Attempt to append an ancestor node to a descendant.","Attempt to append a node to itself.","An <code>Arena</code> structure containing certain <code>Node</code>s.","An iterator of the IDs of the children of a given node, in …","Tree printer for debugging.","An iterator of the IDs of a given node and its …","Indicates that end of a node that has children.","An iterator of the IDs of the siblings after a given node.","Attempt to insert a node after itself.","Attempt to insert a node before itself.","A node within a particular <code>Arena</code>.","Indicator if the node is at a start or endpoint of the tree","Possible node failures.","A node identifier within a particular <code>Arena</code>.","An iterator of the IDs of the siblings before a given node.","An iterator of the IDs of the predecessors of a given node.","Attempt to prepend an ancestor node to a descendant.","Attempt to prepend a node to itself.","Attempt to insert a removed node, or insert to a removed …","An iterator of the IDs of the children of a given node, in …","An iterator of the “sides” of a node visited during a …","Indicates that start of a node that has children.","An iterator of the “sides” of a node visited during a …","Returns an iterator of IDs of this node and its ancestors.","Appends a new child to this node, after existing children.","Creates and appends a new node (from its associated data) …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of nodes the arena can hold without …","Appends a new child to this node, after existing children.","Inserts a new sibling after this node.","Inserts a new sibling before this node.","Prepends a new child to this node, before existing …","Returns an iterator of IDs of this node’s children.","Clears all the nodes in the arena, but retains its …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Counts the number of nodes in arena and returns it.","Returns the pretty-printable proxy object to the node and …","","An iterator of the IDs of a given node and its …","Detaches a node from its parent and siblings. Children are …","","","","","","","","","Returns the ID of the first child of this node, unless it …","","","","","","","","","","","Returns an iterator of IDs of this node and the siblings …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the node with the given id if in …","Returns a reference to the node data.","Returns a mutable reference to the node with the given id …","Returns a mutable reference to the node data.","Retrieves the <code>NodeId</code> correspoding to a <code>Node</code> in the <code>Arena</code>.","","","","","Inserts a new sibling after this node.","Inserts a new sibling before this node.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns <code>true</code> if arena has no nodes, <code>false</code> otherwise.","Return if the <code>Node</code> of NodeId point to is removed.","Checks if the node is marked as removed.","Returns an iterator of all nodes in the arena in …","Returns a mutable iterator of all nodes in the arena in …","Returns the ID of the last child of this node, unless it …","Creates a new empty <code>Arena</code>.","Creates a new node from its associated data.","","","","","","","","","","Returns the ID of the next sibling of this node, unless it …","Returns the next <code>NodeEdge</code> to be returned by forward …","Returns the ID of the parent node, unless this node is the …","","Returns an iterator of IDs of this node and the siblings …","Returns an iterator of IDs of this node and its …","Prepends a new child to this node, before existing …","Returns the previous <code>NodeEdge</code> to be returned by forward …","Returns the ID of the previous sibling of this node, …","","Removes a node from the arena.","Removes a node and its descendants from the arena.","Reserves capacity for <code>additional</code> more nodes to be inserted.","Returns an iterator of IDs of this node’s children, in …","An iterator of the “sides” of a node visited during a …","","","","","","","","","","","","","","","","","","","","An iterator of the “sides” of a node visited during a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new empty <code>Arena</code> with enough capacity to store <code>n</code> …"],"i":[0,5,5,0,0,0,0,16,0,5,5,0,0,0,0,0,0,5,5,5,0,0,16,0,1,1,1,2,9,5,1,10,3,11,12,13,7,14,15,16,17,18,2,9,5,1,10,3,11,12,13,7,14,15,16,17,18,2,1,1,1,1,1,2,2,9,5,1,10,3,11,12,13,7,14,15,16,17,18,2,9,5,1,10,3,11,12,13,7,14,15,16,17,18,1,2,1,2,1,1,2,1,10,16,2,1,10,16,10,2,9,9,5,5,1,1,10,10,16,1,2,9,5,1,10,3,11,12,13,7,14,15,16,17,18,2,10,2,10,2,1,16,2,2,1,1,2,9,5,1,1,1,10,3,11,12,13,7,14,15,16,17,18,3,11,12,13,7,14,15,17,18,2,1,10,2,2,10,2,2,3,11,12,13,7,14,15,17,18,10,16,10,1,1,1,1,16,10,5,1,1,2,1,1,2,9,5,1,10,3,11,12,13,7,14,15,16,17,18,9,5,1,10,1,2,9,5,1,10,3,11,12,13,7,14,15,16,17,18,2,9,5,1,10,3,11,12,13,7,14,15,16,17,18,2,9,5,1,10,3,11,12,13,7,14,15,16,17,18,2],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],3],[[1,1,2]],[[1,2],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,4],[[1,1,2],[[6,[5]]]],[[1,1,2],[[6,[5]]]],[[1,1,2],[[6,[5]]]],[[1,1,2],[[6,[5]]]],[[1,2],7],[2],[[[2,[8]]],[[2,[8]]]],[[[9,[8]]],[[9,[8]]]],[5,5],[1,1],[[[10,[8]]],[[10,[8]]]],[[[3,[8]]],[[3,[8]]]],[[[11,[8]]],[[11,[8]]]],[[[12,[8]]],[[12,[8]]]],[[[13,[8]]],[[13,[8]]]],[[[7,[8]]],[[7,[8]]]],[[[14,[8]]],[[14,[8]]]],[[[15,[8]]],[[15,[8]]]],[16,16],[[[17,[8]]],[[17,[8]]]],[[[18,[8]]],[[18,[8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],19],[2,4],[[1,2],9],[[],2],[[1,2],15],[[1,2]],[[[2,[20]],[2,[20]]],21],[[1,1],21],[[[10,[20]],[10,[20]]],21],[[16,16],21],[[],21],[[],21],[[],21],[[],21],[10,[[22,[1]]]],[[[2,[23]],24],25],[[[9,[23]],24],25],[[[9,[26]],24],25],[[5,24],25],[[5,24],25],[[1,24],25],[[1,24],25],[[10,24],25],[[[10,[23]],24],25],[[16,24],25],[[1,2],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[2,1],[[22,[10]]]],[10],[[2,1],[[22,[10]]]],[10],[[2,10],[[22,[1]]]],[[1,27]],[[16,27]],[[2,1],10],[[2,1],10],[[1,1,2]],[[1,1,2]],[[]],[[]],[[]],[[]],[1,4],[1,28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,21],[[1,2],21],[10,21],[2,29],[2,29],[10,[[22,[1]]]],[[],2],[2,1],[3,[[22,[1]]]],[11,[[22,[1]]]],[12,[[22,[1]]]],[13,[[22,[1]]]],[7,[[22,[1]]]],[14,[[22,[1]]]],[15,[[22,[1]]]],[17,[[22,[16]]]],[18,[[22,[16]]]],[10,[[22,[1]]]],[[16,2],[[22,[16]]]],[10,[[22,[1]]]],[[1,1],[[22,[19]]]],[[1,2],12],[[1,2],11],[[1,1,2]],[[16,2],[[22,[16]]]],[10,[[22,[1]]]],[30],[[1,2]],[[1,2]],[[2,4]],[[1,2],14],[[1,2],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],31],[[],31],[[],31],[[],31],[[1,2],17],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[4,2]],"c":[],"p":[[3,"NodeId"],[3,"Arena"],[3,"Ancestors"],[15,"usize"],[4,"NodeError"],[4,"Result"],[3,"Children"],[8,"Clone"],[3,"DebugPrettyPrint"],[3,"Node"],[3,"Predecessors"],[3,"PrecedingSiblings"],[3,"FollowingSiblings"],[3,"ReverseChildren"],[3,"Descendants"],[4,"NodeEdge"],[3,"Traverse"],[3,"ReverseTraverse"],[4,"Ordering"],[8,"PartialEq"],[15,"bool"],[4,"Option"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Display"],[8,"Hasher"],[3,"NonZeroUsize"],[8,"Iterator"],[3,"Demand"],[3,"String"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
